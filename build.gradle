buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.2.2'
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath 'com.moowork.gradle:gradle-gulp-plugin:0.12'
        classpath "org.wildfly.swarm:wildfly-swarm-plugin:1.0.0.CR1"
    }
}

plugins {
  id "com.wiredforcode.spawn" version "0.6.0"
  id "de.undercouch.download" version "2.1.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'
apply plugin: 'com.moowork.node'
apply plugin: 'com.moowork.gulp'
apply plugin: 'wildfly-swarm'
group = 'feedreader'
version = '1.0'

description = """feedreader"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

import org.apache.tools.ant.filters.*
import de.undercouch.gradle.tasks.download.Download

apply from: "defaults.gradle"

war {
    filter ReplaceTokens, tokens: [
        "shiroConfigurationLocations": project.property("shiroConfigurationLocations"),
        "shiro.user.username": project.property("shiro.user.username"),
        "shiro.user.password": project.property("shiro.user.password"),
        "shiro.admin.username": project.property("shiro.admin.username"),
        "shiro.admin.password": project.property("shiro.admin.password"),
    ]
    entryCompression ZipEntryCompression.STORED
}

processResources {
    filter ReplaceTokens, tokens: [
        "stagemonitor.active": project.property("stagemonitor.active")
    ]
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {url "http://repo.gradle.org/gradle/libs-releases-local"}
    maven {url "https://repository.jboss.org/nexus/content/groups/public/"}
    maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    // Frontend
    compile 'org.webjars.bower:bootstrap-material-design:0.5.8'
    compile 'org.webjars:font-awesome:4.5.0'
    compile 'org.webjars.npm:requirejs:2.1.22'
    compile 'org.webjars.npm:bootstrap:3.3.6'
    compile 'org.webjars.npm:jquery:2.2.1'
    compile 'org.webjars.npm:react:0.14.7'
    compile 'org.webjars.npm:react-dom:0.14.7'
    
    // Wildfly swarw
    compile "org.wildfly.swarm:jaxrs-cdi:1.0.0.CR1"
    compile "org.wildfly.swarm:cdi:1.0.0.CR1"
    compile "org.wildfly.swarm:datasources:1.0.0.CR1"
    compile "org.wildfly.swarm:jpa:1.0.0.CR1"
    compile "org.wildfly.swarm:ejb:1.0.0.CR3"
    compile "org.wildfly.swarm:transactions:1.0.0.CR1"
    
    // Security
    compile group: 'org.apache.shiro', name: 'shiro-web', version:'1.2.3'
    
    // Backend
    compile group: 'com.rometools', name: 'rome', version:'1.5.0'
    compile group: 'com.google.guava', name: 'guava', version:'18.0'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.3.2'
    
    // Logging
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version:'2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version:'2.5'
    compile group: 'org.apache.logging.log4j', name: 'log4j-web', version:'2.5'
    compile group: 'org.slf4j', name: 'slf4j-simple', version:'1.7.7'
    
    // Database
    compile 'org.liquibase:liquibase-core:3.4.2'
    compile 'org.yaml:snakeyaml:1.17'
    compileOnly 'org.hibernate:hibernate-entitymanager:5.1.0.Final'
    compileOnly 'org.hibernate:hibernate-core:5.1.0.Final'
    
    // Monitoring
    //compile group: 'org.stagemonitor', name: 'stagemonitor-web', version:'0.20.0'
    //compile group: 'org.stagemonitor', name: 'stagemonitor-os', version:'0.20.0'
    compile 'net.bull.javamelody:javamelody-core:1.59.0'
    
    // Test
    testCompile group: 'junit', name: 'junit', version:'4.12'
    
    // database Test
    testCompile 'org.hibernate:hibernate-entitymanager:5.1.0.Final'
    testCompile 'org.hibernate:hibernate-core:5.1.0.Final'
    testCompile 'org.hsqldb:hsqldb:2.3.3'
    testCompile 'com.h2database:h2:1.4.191'
    
    // Arquillian
    def arquillianVersion = "1.1.5.Final"
    testCompile group: 'org.jboss.arquillian', name: 'arquillian-bom', version: arquillianVersion
    testCompile group: 'org.jboss.arquillian.junit', name: 'arquillian-junit-container', version: arquillianVersion
    testCompile group: 'org.jboss.arquillian.extension', name: 'arquillian-jacoco', version: "1.0.0.Alpha8"
    testCompile group: 'org.wildfly', name: 'wildfly-arquillian-container-remote', version:'8.2.1.Final'
    
    def arquillianGradleDepchainVersion = "2.2.0-beta-1"
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-depchain', version:arquillianGradleDepchainVersion
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-spi', version:arquillianGradleDepchainVersion
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-api', version:arquillianGradleDepchainVersion
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-gradle-depchain', version: arquillianGradleDepchainVersion
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-api-gradle-embedded-archive', version: arquillianGradleDepchainVersion
    testCompile group: 'org.jboss.shrinkwrap.resolver', name: 'shrinkwrap-resolver-impl-gradle-embedded-archive', version: arquillianGradleDepchainVersion
    
    def jacksonVersion = "2.4.1"
    providedCompile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: jacksonVersion
    providedCompile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: jacksonVersion
    providedCompile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: jacksonVersion
    providedCompile group: 'javax', name: 'javaee-api', version:'7.0'
    
    def cargoVersion = '1.4.18'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
          "org.codehaus.cargo:cargo-ant:$cargoVersion",
          "org.wildfly:wildfly-controller-client:8.2.1.Final"
}

if(hasProperty("wildflyHostname") && hasProperty("wildflyUsername") && hasProperty("wildflyPassword")) {
    cargo {
        containerId = "wildfly10x"
        port = 8080
        remote {
            hostname = wildflyHostname
            username = wildflyUsername
            password = wildflyPassword
        }
    }

    test {
        /** 
         * Arquillian configuration to wildfly
         */
        systemProperty 'wildfly.host', wildflyHostname
        systemProperty 'wildfly.username', wildflyUsername
        systemProperty 'wildfly.password', wildflyPassword
        systemProperty 'wildfly.admin.port', wildflyAdminPort
        systemProperty 'wildfly.port', wildflyPort
    }
}

test {
   // listen to standard out and standard error of the test JVM(s)
   onOutput { descriptor, event ->
      logger.lifecycle("Test: " + descriptor + " : " + event.message )
   }
}

node {
  // Version of node to use.
  version = '5.9.0'

  // Version of npm to use.
  npmVersion = '3.8.1'

  // Base URL for fetching node distributions (change if you have a mirror).
  distBaseUrl = 'https://nodejs.org/dist'

  // If true, it will download node using above parameters.
  // If false, it will try to use globally installed node.
  download = true

  // Set the work directory for unpacking node
  workDir = file("${project.buildDir}/nodejs")

  // Set the work directory where node_modules should be located
  nodeModulesDir = file("${project.projectDir}")
}

gulp {
    // Set the directory where gulpfile.js should be found
    workDir = file("${project.projectDir}")

    // Whether colors should output on the terminal
    colors = true

    // Whether output from Gulp should be buffered - useful when running tasks in parallel
    bufferOutput = false
}

task installGulpDependencies(type: NpmTask) {
    args = ['install', '--save', 'gulp', 'gulp-babel', 'babel-preset-es2015', 'babel-preset-react', 'babel-plugin-transform-es2015-modules-amd']
}

task jaxrsAnalyzer (type: Exec) {
    def dir = projectDir.toString()
    def jaxrsAnalyzerFile = file(buildDir.toString() + File.separator + "jaxrs-analyzer.jar")
    if (jaxrsAnalyzerFile.exists() == false) {
        download {
            src "https://github.com/sdaschner/jaxrs-analyzer/releases/download/v0.9/jaxrs-analyzer.jar"
            dest buildDir
        }
    }
    workingDir "build/classes/main"
    commandLine "java", "-jar", "../../jaxrs-analyzer.jar", "-b", "asciidoc", "-n", "feedreader", "-o", "../API.asciidoc", "."
}


swarm {
    mainClassName = 'fr.feedreader.SwarmMain'
    moduleDirs = [new File(buildDir, 'resources/main/modules')]
}

// shortcut deployment
cargoRedeployRemote.dependsOn war
cargoDeployRemote.dependsOn war
// runs "gulp build" as part of your gradle build
war.dependsOn gulp_build
installGulpDependencies.dependsOn installGulp
